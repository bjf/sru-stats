#!/usr/bin/env python3
#

import sys
from argparse                           import ArgumentParser, RawDescriptionHelpFormatter
from lib.launchpad                      import Launchpad
import lib.colored
from datetime                           import datetime
from lib.lp                             import KTB, LP

def pro(*args, **kwargs):
    print(*args, file=sys.stdout, **kwargs)

def set_row_background():
    global row_is_odd
    if row_is_odd:
        row_is_odd = False
        return lib.colored.bg(clr_bg_odd_rows)
    else:
        row_is_odd = True
        # return lib.colored.bg('grey_11')
        return lib.colored.bg(clr_bg_even_rows)

def white(text, bg=''):
    return lib.colored.stylize(text, lib.colored.fg(clr_default) + bg)

def lino(text, bg=''):
    return lib.colored.stylize(text, lib.colored.fg(clr_lino) + bg)

def highlight(text, bg=''):
    return lib.colored.stylize(text, lib.colored.fg(clr_highlight) + bg)


clr_duration     = 'green'
clr_crank        = 'cyan'
clr_build        = 'yellow_2'
clr_sru          = 'light_coral'
clr_lino         = 'dark_khaki'
clr_testing      = 'cyan'
clr_proposed     = 'sea_green_1a'
clr_updates      = 'sea_green_1a'
clr_signing      = 'light_goldenrod_3'
clr_default      = 'white'
clr_bt           = 'plum_2'
clr_highlight    = 'yellow_1'
clr_bg_odd_rows  = 'black'
clr_bg_even_rows = 'grey_15'

def anno_r(color_style, text):
    return lib.colored.stylize(f'{text:>32}', lib.colored.fg(color_style) + rbg)

def anno_d(text):
    return lib.colored.stylize(f'{text:<32}', lib.colored.fg(clr_duration) + rbg)

# date_to_string
#
def date_to_string(date):
    return "None" if date is None else str(date).split('.', 1)[0]


global rbg
rbg = ''
row_is_odd = True


# LPBugHistory
#
class LPBugHistory():
    # __init__
    #
    def __init__(self, args):
        '''
        '''
        self.args = args
        self.defaults = {}

    # initialize
    #
    def initialize(self):
        self.lp = Launchpad('lpbug-history').service

    def duration(self, before, after):
        delta = datetime.strptime(after, '%Y-%m-%d %H:%M:%S') - datetime.strptime(before, '%Y-%m-%d %H:%M:%S')
        return str(delta)

    # __verbose_bug_info
    #
    def __print_bug_info(self, bug):
        pro("")
        pro("    %s: %s" % (bug.id, bug.title))
        pro("")

        pro("                 Owner: %s" % (bug.owner))
        pro("                 Cycle: %s" % (bug.sru_cycle))
        pro('')

        pro("               Created: %s" % (date_to_string(bug.date_created)))
        pro("          Last Message: %s" % (date_to_string(bug.date_last_message)))
        pro("          Last Updated: %s" % (date_to_string(bug.date_last_updated)))
        pro("             Duplicate: %s" % bug.duplicate_of)
        pro('')

        global rbg
        global row_fg
        history = bug.activity
        prev_timestamp = None
        lineno = 0
        for activity in history:
            if activity.whatchanged.endswith('status'):
                lineno += 1
                rbg = set_row_background()

                task = activity.whatchanged.split(':', 1)[0]
                if '/' in task:
                    task = task.split('/')[1]
                if args.highlight is not None and task in args.highlight:
                    row_fg = highlight
                else:
                    row_fg = white

                timestamp = str(activity.datechanged).split('.', 1)[0]
                prev_status = activity.oldvalue
                new_status  = activity.newvalue
                ln = lino(f'{lineno:>3}')
                o  = row_fg(ln, rbg)
                o += row_fg(f'  {timestamp}', rbg)
                o += row_fg(f'    {task:30}', rbg)
                o += row_fg(f'    {prev_status:15}', rbg)
                o += row_fg(f'->  {new_status:15}', rbg)

                if prev_timestamp is not None:
                    tick = self.duration(prev_timestamp, timestamp)
                    o += row_fg(f'    {tick:>16}', rbg)
                else:
                    o += row_fg('    ', rbg)
                prev_timestamp = timestamp
                o += row_fg('    ', rbg)

                # Add annotations to some lines
                #
                match f'{task}:{new_status}':
                    case 'prepare-package:In Progress':                               # crank started
                        crank_start = timestamp
                        o += anno_r(clr_crank, 'crank started  ')
                        o += anno_d(' ')
                        o += anno_r(clr_default, ' ')

                    case 'prepare-package:Fix Released':                              # crank finished
                        duration = '(' + self.duration(crank_start, timestamp) + ')'
                        o += anno_r(clr_crank, 'crank finished  ')
                        o += anno_d(duration)
                        o += anno_r(clr_default, ' ')

                    case 'prepare-package:Fix Committed':                             # buld started
                        build_start = timestamp
                        o += anno_r(clr_build, 'build started  ')
                        o += anno_d(' ')
                        o += anno_r(clr_default, ' ')

                    case 'boot-testing:Triaged':                                      # build finished & boot testing started
                        boot_testing_start = timestamp
                        duration = '(' + self.duration(build_start, timestamp) + ')'
                        o += anno_r(clr_build, 'build finished  ')
                        o += anno_d(duration)
                        o += anno_r(clr_bt, 'boot-testing started  ')

                    case 'boot-testing:Fix Released':                                 # boot testing finished
                        duration = '(' + self.duration(boot_testing_start, timestamp) + ')'
                        o += anno_r(clr_bt, 'boot-testing finished  ')
                        o += anno_d(duration)
                        o += anno_r(clr_default, ' ')

                    case 'promote-to-proposed:Fix Released':                          # -proposed
                        duration = '(' + self.duration(crank_start, timestamp) + ')'
                        o += anno_r(clr_proposed, '-proposed promotion finished  ')
                        o += anno_d(duration)
                        o += anno_r(clr_default, ' ')

                    case 'promote-to-updates:Fix Released':                           # -updates
                        duration = '(' + self.duration(crank_start, timestamp) + ')'
                        o += anno_r(clr_updates, '-updates promotion finished  ')
                        o += anno_d(duration)
                        o += anno_r(clr_default, ' ')

                    case 'regression-testing:Incomplete':
                        regression_testing_start = timestamp
                        o += anno_r(clr_testing, 'regression testing started  ')
                        o += anno_d(' ')
                        o += anno_r(clr_default, ' ')

                    case 'regression-testing:Fix Released':
                        duration = '(' + self.duration(regression_testing_start, timestamp) + ')'
                        o += anno_r(clr_testing, 'regression testing finished  ')
                        o += anno_d(duration)
                        o += anno_r(clr_default, ' ')

                    case 'certification-testing:Opinion':
                        certification_testing_start = timestamp
                        o += anno_r(clr_testing, 'certification testing started  ')
                        o += anno_d(' ')
                        o += anno_r(clr_default, ' ')

                    case 'certification-testing:Fix Released':
                        duration = '(' + self.duration(certification_testing_start, timestamp) + ')'
                        o += anno_r(clr_testing, 'certification testing finished  ')
                        o += anno_d(duration)
                        o += anno_r(clr_default, ' ')

                    case 'automated-testing:Incomplete':
                        automated_testing_start = timestamp
                        o += anno_r(clr_testing, 'automated testing started  ')
                        o += anno_d(' ')
                        o += anno_r(clr_default, ' ')

                    case 'automated-testing:Fix Released':
                        duration = '(' + self.duration(automated_testing_start, timestamp) + ')'
                        o += anno_r(clr_testing, 'automated testing finished  ')
                        o += anno_d(duration)
                        o += anno_r(clr_default, ' ')

                    case ('sru-review:Triaged' | 'sru-review:Confirmed'):
                        sru_review_ready = timestamp
                        o += anno_r(clr_sru, 'sru review ready  ')
                        o += anno_d(' ')
                        o += anno_r(clr_default, ' ')

                    case 'sru-review:Fix Released':
                        duration = '(' + self.duration(sru_review_ready, timestamp) + ')'
                        o += anno_r(clr_sru, 'sru review finished  ')
                        o += anno_d(duration)
                        o += anno_r(clr_default, ' ')

                    case 'new-review:Triaged':
                        new_review_ready = timestamp
                        o += anno_r(clr_sru, 'new review ready  ')
                        o += anno_d(' ')
                        o += anno_r(clr_default, ' ')

                    case 'new-review:Fix Released':
                        duration = '(' + self.duration(new_review_ready, timestamp) + ')'
                        o += anno_r(clr_sru, 'new review finished  ')
                        o += anno_d(duration)
                        o += anno_r(clr_default, ' ')

                    case 'signing-signoff:Confirmed':
                        signing_start = timestamp
                        o += anno_r(clr_signing, 'signing start  ')
                        o += anno_d(' ')
                        o += anno_r(clr_default, ' ')

                    case 'signing-signoff:Fix Released':
                        duration = '(' + self.duration(signing_start, timestamp) + ')'
                        o += anno_r(clr_signing, 'signing finished  ')
                        o += anno_d(duration)
                        o += anno_r(clr_default, ' ')

                    case _:
                        o += anno_r(clr_default, ' ')
                        o += anno_d(' ')
                        o += anno_r(clr_default, ' ')

                pro(o)

    # main
    #
    def main(self):
        try:
            self.initialize()

            # Go through all the bug-ids that the user specified on the command line.
            #
            for id in self.args.bugs:

                # Get an instance of a bug object based on a bug-id. If the bug
                # id does not exist or if it is not visibile to you with the LP
                # credentials you are using, an exception will be thrown.
                #
                ktb = KTB(id)
                self.__print_bug_info(ktb)

        # Handle the user presses <ctrl-C>.
        #
        except KeyboardInterrupt:
            pass

        return


if __name__ == '__main__':
    # Command line argument setup and initial processing
    #
    app_description = '''
The kernel tracking bug is specified on the command line. The bug's history is pulled from LP and listed along with annotations
about the beginning and end of different stages in the process and how long that state took to finish.
    '''
    app_epilog = '''
examples:
    ./lpbug-history 2065886
    '''
    bugs_help = 'A list of the Launchpad bug ids that are to to have their history displayed and analyzed.'
    highlight_help = 'A comma separaged list of the bug tasks that should be highlighted in yellow.'
    parser = ArgumentParser(description=app_description, epilog=app_epilog, formatter_class=RawDescriptionHelpFormatter)
    parser.add_argument('bugs',  metavar='BUGS', nargs="*",                  default=None, help=bugs_help)
    parser.add_argument('--highlight', nargs='?', help=highlight_help)
    args = parser.parse_args()

    if args.highlight is not None:
        args.highlight = args.highlight.split(',')

    app = LPBugHistory(args)
    exit(app.main())


# vi:set ts=4 sw=4 expandtab:
